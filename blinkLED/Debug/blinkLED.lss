
blinkLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c6  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000406  00000000  00000000  0000119d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021d  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_6>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_TIM>:
	TCNT1 = 0;   // reset timer
}

int init_TIM (void)
{
	TCNT1 = 0;   // for 1 sec at 12 MHz	
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
	TCCR1A = 0x00;
  86:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescaler
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = T_TIM;
  8c:	83 ed       	ldi	r24, 0xD3	; 211
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	9b bd       	out	0x2b, r25	; 43
  92:	8a bd       	out	0x2a, r24	; 42
	TIMSK = (1 << OCIE1A) ;   // Enable timer1 overflow interrupt(TOIE1)
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	89 bf       	out	0x39, r24	; 57
	return 0;
}
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <init_GPIO>:

int init_GPIO (void)
{
	DDRA = 0x00;
  9e:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
  a0:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;
  a2:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;
  a4:	11 ba       	out	0x11, r1	; 17
	
	//Blinking port
	DDRB |= (1<< PB0);
  a6:	b8 9a       	sbi	0x17, 0	; 23
	
	//Digit show port
	DDRC = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	DDRA &= ~(1<<PA4);
	DDRA &= ~(1<<PA5);
	DDRA &= ~(1<<PA6);
	DDRA &= ~(1<<PA7);
	*/
	DDRA = 0b11110000;
  ac:	80 ef       	ldi	r24, 0xF0	; 240
  ae:	8a bb       	out	0x1a, r24	; 26
	return 0;
}
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <dig_show>:
	return 0;
}

char dig_show (char digit)
{
	if (digit>9)
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	40 f4       	brcc	.+16     	; 0xca <dig_show+0x14>
		return 1;
	DIGIT_DISP_PORT = nums[digit];
  ba:	e8 2f       	mov	r30, r24
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	eb 59       	subi	r30, 0x9B	; 155
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	80 81       	ld	r24, Z
  c4:	85 bb       	out	0x15, r24	; 21
	return 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret
}

char dig_show (char digit)
{
	if (digit>9)
		return 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
	DIGIT_DISP_PORT = nums[digit];
	return 0;
}
  cc:	08 95       	ret

000000ce <dig_sel>:
	return 0;
}

char dig_sel (char selection)
{
	disp_select = selection;
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (selection > 3)
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	30 f5       	brcc	.+76     	; 0x122 <dig_sel+0x54>
		return 1;
	else if (!selection)	//turn off
  d6:	81 11       	cpse	r24, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <dig_sel+0x14>
	{
		DIGIT_SEL_PORT |= (1<<DIGIT1_PIN);
  da:	dd 9a       	sbi	0x1b, 5	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT2_PIN);
  dc:	de 9a       	sbi	0x1b, 6	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT3_PIN);
  de:	df 9a       	sbi	0x1b, 7	; 27
		return 0;
  e0:	08 95       	ret
	}
	switch (selection)
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	51 f0       	breq	.+20     	; 0xfa <dig_sel+0x2c>
  e6:	28 f0       	brcs	.+10     	; 0xf2 <dig_sel+0x24>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	59 f0       	breq	.+22     	; 0x102 <dig_sel+0x34>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	69 f0       	breq	.+26     	; 0x10a <dig_sel+0x3c>
  f0:	1a c0       	rjmp	.+52     	; 0x126 <dig_sel+0x58>
	{
	case 0: //just in case
		DIGIT_SEL_PORT |= (1<<DIGIT1_PIN);
  f2:	dd 9a       	sbi	0x1b, 5	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT2_PIN);
  f4:	de 9a       	sbi	0x1b, 6	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT3_PIN);
  f6:	df 9a       	sbi	0x1b, 7	; 27
		break;
  f8:	0b c0       	rjmp	.+22     	; 0x110 <dig_sel+0x42>
	case 1:
		DIGIT_SEL_PORT &= ~(1<<DIGIT1_PIN);
  fa:	dd 98       	cbi	0x1b, 5	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT2_PIN);
  fc:	de 9a       	sbi	0x1b, 6	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT3_PIN);
  fe:	df 9a       	sbi	0x1b, 7	; 27
		break;
 100:	07 c0       	rjmp	.+14     	; 0x110 <dig_sel+0x42>
	case 2:
		DIGIT_SEL_PORT |= (1<<DIGIT1_PIN);
 102:	dd 9a       	sbi	0x1b, 5	; 27
		DIGIT_SEL_PORT &= ~(1<<DIGIT2_PIN);
 104:	de 98       	cbi	0x1b, 6	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT3_PIN);
 106:	df 9a       	sbi	0x1b, 7	; 27
		break;
 108:	03 c0       	rjmp	.+6      	; 0x110 <dig_sel+0x42>
	case 3:
		DIGIT_SEL_PORT |= (1<<DIGIT1_PIN);
 10a:	dd 9a       	sbi	0x1b, 5	; 27
		DIGIT_SEL_PORT |= (1<<DIGIT2_PIN);
 10c:	de 9a       	sbi	0x1b, 6	; 27
		DIGIT_SEL_PORT &= ~(1<<DIGIT3_PIN);
 10e:	df 98       	cbi	0x1b, 7	; 27
		break;
	default:
		return 2;
		break;
	}
	dig_show(disp_arr[selection-1]);
 110:	e8 2f       	mov	r30, r24
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e0 5a       	subi	r30, 0xA0	; 160
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 81       	ld	r24, Z
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <dig_show>
	return 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

char dig_sel (char selection)
{
	disp_select = selection;
	if (selection > 3)
		return 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
		DIGIT_SEL_PORT |= (1<<DIGIT1_PIN);
		DIGIT_SEL_PORT |= (1<<DIGIT2_PIN);
		DIGIT_SEL_PORT &= ~(1<<DIGIT3_PIN);
		break;
	default:
		return 2;
 126:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	dig_show(disp_arr[selection-1]);
	return 0;
}
 128:	08 95       	ret

0000012a <__vector_6>:
char count_GL=250;
char disp_arr[3]={0,5,2};
char disp_select=1;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	if (!disp_select)
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	81 11       	cpse	r24, r1
 152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_6+0x30>
	{
		disp_select=0;
 154:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	09 c0       	rjmp	.+18     	; 0x16c <__vector_6+0x42>
	}
	else if (disp_select>3)
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	20 f0       	brcs	.+8      	; 0x166 <__vector_6+0x3c>
	{
		disp_select=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	03 c0       	rjmp	.+6      	; 0x16c <__vector_6+0x42>
	}
	else
	{
		disp_select++;
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	dig_sel (disp_select);
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	0e 94 67 00 	call	0xce	; 0xce <dig_sel>
	TCNT1 = 0;   // reset timer
 174:	1d bc       	out	0x2d, r1	; 45
 176:	1c bc       	out	0x2c, r1	; 44
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:
}

int main(void)
{
    /* Replace with your application code */
	init_GPIO();
 19a:	0e 94 4f 00 	call	0x9e	; 0x9e <init_GPIO>
	init_TIM();
 19e:	0e 94 41 00 	call	0x82	; 0x82 <init_TIM>
	sei();
 1a2:	78 94       	sei
	dig_sel(5);
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	0e 94 67 00 	call	0xce	; 0xce <dig_sel>
    while (1) 
    {
		display=count_GL;
		for (int i=0;i<3;i++)
		{
			disp_arr[i]=display%10;
 1aa:	e1 e6       	ldi	r30, 0x61	; 97
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	4d ec       	ldi	r20, 0xCD	; 205
 1b0:	69 e2       	ldi	r22, 0x29	; 41
			display/=10;
		}
		
		PORTB ^= (1<<PORTB0);
 1b2:	51 e0       	ldi	r21, 0x01	; 1
	sei();
	dig_sel(5);
	char display;
    while (1) 
    {
		display=count_GL;
 1b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_GL>
		for (int i=0;i<3;i++)
		{
			disp_arr[i]=display%10;
 1b8:	84 9f       	mul	r24, r20
 1ba:	91 2d       	mov	r25, r1
 1bc:	11 24       	eor	r1, r1
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	39 2f       	mov	r19, r25
 1c6:	33 0f       	add	r19, r19
 1c8:	23 2f       	mov	r18, r19
 1ca:	22 0f       	add	r18, r18
 1cc:	22 0f       	add	r18, r18
 1ce:	23 0f       	add	r18, r19
 1d0:	38 2f       	mov	r19, r24
 1d2:	32 1b       	sub	r19, r18
 1d4:	30 83       	st	Z, r19
 1d6:	94 9f       	mul	r25, r20
 1d8:	21 2d       	mov	r18, r1
 1da:	11 24       	eor	r1, r1
 1dc:	26 95       	lsr	r18
 1de:	26 95       	lsr	r18
 1e0:	26 95       	lsr	r18
 1e2:	22 0f       	add	r18, r18
 1e4:	32 2f       	mov	r19, r18
 1e6:	33 0f       	add	r19, r19
 1e8:	33 0f       	add	r19, r19
 1ea:	23 0f       	add	r18, r19
 1ec:	92 1b       	sub	r25, r18
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	86 9f       	mul	r24, r22
 1f2:	81 2d       	mov	r24, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	82 95       	swap	r24
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	82 83       	std	Z+2, r24	; 0x02
			display/=10;
		}
		
		PORTB ^= (1<<PORTB0);
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	85 27       	eor	r24, r21
 200:	88 bb       	out	0x18, r24	; 24
		count_GL++;
 202:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_GL>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_GL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	9e e9       	ldi	r25, 0x9E	; 158
 210:	24 e2       	ldi	r18, 0x24	; 36
 212:	81 50       	subi	r24, 0x01	; 1
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	20 40       	sbci	r18, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x78>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x82>
 21c:	00 00       	nop
 21e:	ca cf       	rjmp	.-108    	; 0x1b4 <main+0x1a>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
